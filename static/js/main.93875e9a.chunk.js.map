{"version":3,"sources":["components/InvestmentCard.js","components/InvestmentHeader.js","components/InvestmentForm.js","components/NavBar.js","App.js","services/taxService.js","serviceWorker.js","index.js"],"names":["valueClass","toPercentage","value","toFixed","InvestmentCard","props","className","name","endDate","type","multiplier","adder","hasTax","taxRate","annualRate","grossProfitRate","netProfitRate","headerClass","InvestmentHeader","InvestmentForm","useState","setName","setEndDate","setType","setMultiplier","setAdder","setHasTax","hidden","onSubmit","event","preventDefault","investment","addInvestment","closeHandler","onClick","key","htmlFor","onChange","target","id","NavBar","App","ipca","setIpca","selic","setSelic","cdi","setCdi","showInvetmentForm","setShowInvetmentForm","inputInvestments","setInputInvestments","concat","map","days","endDateString","currentDate","Date","diffTime","Math","abs","ceil","getDays","getTaxRate","calculatedAnnualRate","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93875e9a.chunk.js","sourcesContent":["import React from 'react';\n\nconst valueClass = 'w-1/12 text-lg text-center';\n\nconst toPercentage = (value) => {\n    return (value * 100).toFixed(2)+\"%\";\n}\n\nconst InvestmentCard = (props) => {\n    return (\n        <div className='flex items-center justify-around w-full bg-teal-300 py-4 rounded'>\n            <div className={valueClass}>\n                {props.name}\n            </div>\n            <div className={valueClass}>\n                {props.endDate}\n            </div>\n            <div className={valueClass}>\n                {props.type}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.multiplier)}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.adder)}\n            </div>\n            <div className={valueClass}>\n                {props.hasTax ? 'Sim' : 'Não'}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.taxRate)}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.annualRate)}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.grossProfitRate)}\n            </div>\n            <div className={valueClass}>\n                {toPercentage(props.netProfitRate)}\n            </div>\n        </div>\n    )\n} \n\nexport default InvestmentCard;","import React from 'react';\n\nconst headerClass = 'w-1/12 text-sm text-gray-200 text-center font-bold';\n\nconst InvestmentHeader = () => {\n    return (\n        <div className='flex justify-around w-full bg-teal-700 py-4 rounded'>\n            <div className={headerClass}>\n                Nome\n            </div>\n            <div className={headerClass}>\n                Vencimento\n            </div>\n            <div className={headerClass}>\n                Tipo\n            </div>\n            <div className={headerClass}>\n                Multiplcar\n            </div>\n            <div className={headerClass}>\n                Adicionar (% anual)\n            </div>\n            <div className={headerClass}>\n                Imposto\n            </div>\n            <div className={headerClass}>\n                Taxa de Imposto\n            </div>\n            <div className={headerClass}>\n                Valorização Anual (% anual)\n            </div>\n            <div className={headerClass}>\n                Valorização Bruta\n            </div>\n            <div className={headerClass}>\n                Valorização Líquida\n            </div>\n        </div>\n    )\n}\n\nexport default InvestmentHeader;","import React, { useState } from 'react';\n\nconst InvestmentForm = props => {\n    const [name, setName] = useState('');\n    const [endDate, setEndDate] = useState('');\n    const [type, setType] = useState('');\n    const [multiplier, setMultiplier] = useState(1.0);\n    const [adder, setAdder] = useState(0);\n    const [hasTax, setHasTax] = useState();\n    \n    const handleSubmit = (event) => {\n        event.preventDefault();\n        const investment = {\n            name: name,\n            endDate: endDate,\n            type: type,\n            multiplier: multiplier,\n            adder: adder,\n            hasTax: hasTax === 'true'\n        }\n        props.addInvestment(investment);\n        props.closeHandler()\n    }\n\n    return (\n        <div \n            hidden={props.hidden}\n            className='w-full h-full absolute'>\n            <form \n                onSubmit={handleSubmit} \n                className='flex flex-col items-center w-3/12 mx-auto px-4 py-4 rounded bg-teal-200'>\n                <button \n                    onClick={props.closeHandler}\n                    className='ml-auto text-xl font-bold'>\n                    X\n                </button>\n                \n                <label key='name' htmlFor='name' className='mt-2'> Nome:</label>\n                <input\n                 value={name}\n                 onChange={(event) => setName(event.target.value)}\n                 id='name' \n                 className='rounded' \n                 type='text'/>\n\n                <label htmlFor='endDate' className='mt-2' key='vencimento'>Vencimento:</label>\n                <input\n                 value={endDate}\n                 onChange={(event) => setEndDate(event.target.value)}\n                 id='endDate' \n                 className='rounded' \n                 type='date'/>\n\n                <label htmlFor='type' className='mt-2'>Tipo</label>\n                <div \n                 id='type'\n                 className='flex justify-around items-center'\n                 onChange={(event) => setType(event.target.value)}>\n                    <input type=\"radio\" id=\"selic\" name=\"type\" value=\"SELIC\"/>\n                    <label htmlFor=\"selic\">SELIC</label>\n                    <input type=\"radio\" id=\"cdi\" name=\"type\" value=\"CDI\"/>\n                    <label htmlFor=\"cdi\">CDI</label>\n                    <input type=\"radio\" id=\"ipca\" name=\"type\" value=\"IPCA\"/>\n                    <label htmlFor=\"ipca\">IPCA</label>\n                </div>\n\n                <label htmlFor='multplier' className='mt-2' key='multplier'>\n                    Multiplicar:\n                </label>\n                <input \n                 id='multplier' \n                 className='rounded text-center w-3/12' \n                 type='number'\n                 value={multiplier}\n                 onChange={(event) => setMultiplier(event.target.value)}/>\n\n                <label htmlFor='adder' className='mt-2' key='somar'>\n                    Somar:\n                </label>\n                <input \n                 id='adder' \n                 className='rounded text-center w-3/12'\n                 type='number' \n                 value={adder}\n                 onChange={(event) => setAdder(event.target.value)}/>\n\n                <label htmlFor='hasTax' className='mt-2'>Possui imposto de Renda?</label>\n                <div \n                 id='hasTax'\n                 className='flex justify-around items-center'\n                 onChange={(event) => setHasTax(event.target.value)}>\n                    <input type=\"radio\" id=\"hasTax-true\" name=\"hasTax\" value=\"true\"/>\n                    <label htmlFor=\"hasTax-true\">Sim</label>\n                    <input type=\"radio\" id=\"hasTax-false\" name=\"hasTax\" value=\"false\"/>\n                    <label htmlFor=\"hasTax-false\">Não</label>\n                </div>\n\n                <input\n                 className='mt-8 px-4 py-2 bg-green-500 rounded text-white'\n                 type='submit' \n                 onSubmit={props.onSubmit} \n                 value='Criar'/>\n            </form>\n        </div>\n    );\n}\n\nexport default InvestmentForm;","import React from 'react';\n\nconst NavBar = (props) => {\n    return (\n        <nav className='px-16 py-4 shadow-2xl mb-8 bg-teal-300'>\n            <span className='text-2xl'>RendaFixa</span>\n        </nav>\n    );\n};\n\nexport default NavBar;","import React, { useState } from 'react';\nimport './App.css';\nimport InvestmentCard from './components/InvestmentCard';\nimport InvestmentHeader from './components/InvestmentHeader';\nimport InvestmentForm from './components/InvestmentForm';\nimport NavBar from './components/NavBar';\nimport { getTaxRate } from './services/taxService'; \n\nconst App = () => {\n  const [ipca, setIpca] = useState(0);\n  const [selic, setSelic] = useState(0);\n  const [cdi, setCdi] = useState(0);\n  const [showInvetmentForm, setShowInvetmentForm] = useState(true);\n  const [inputInvestments, setInputInvestments] = useState([]);\n\n  const getDays = (endDateString) => {\n\n    const currentDate = new Date();\n    const endDate = new Date(endDateString);\n\n    const diffTime = Math.abs(endDate - currentDate);\n    const days = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return days\n  }\n\n  const getBaseAnnualRate = (type) => {\n    if (type === 'IPCA') {\n      return ipca;\n    } else if (type === 'CDI') {\n      return cdi;\n    } else if (type === 'SELIC') {\n      return selic;\n    }\n  }\n\n  const addInvestment = (investment) => {\n    setInputInvestments(inputInvestments.concat(investment));\n  }\n\n  const buildInvestmentCards = (investment) => {\n\n    const days = getDays(investment.endDate);\n    const taxRate = investment.hasTax ? getTaxRate(days) : 0;\n    const annualRate = getBaseAnnualRate(investment.type);\n    const calculatedAnnualRate = \n      (annualRate * investment.multiplier) + investment.adder;\n\n    const grossProfitRate = ((1 + calculatedAnnualRate) ** (days / 365) - 1);\n    \n    const netProfitRate = grossProfitRate * (1 - taxRate);\n\n    return (\n      <InvestmentCard\n       name={investment.name}\n       endDate={investment.endDate}\n       type={investment.type}\n       multiplier={investment.multiplier}\n       adder={investment.adder}\n       hasTax={investment.hasTax}\n       taxRate={taxRate}\n       annualRate={calculatedAnnualRate}\n       grossProfitRate={grossProfitRate}\n       netProfitRate={netProfitRate}/>\n    )\n  }\n\n\n  return (\n    <div className=\"App\">\n      <NavBar/>\n      <div className='flex-col items-'>\n        <form className='w-4/12 flex items-center mx-16 px-4 py-4 bg-teal-300 rounded ml-auto'>\n          <label className='mx-1 font-bold'>\n            SELIC:\n            <input\n             className='w-full'\n             type=\"number\" \n             name=\"name\" \n             value={selic} \n             onChange={(event) => setSelic(event.target.value)}/>\n          </label>\n          <label className='mx-1 font-bold'>\n            CDI:\n            <input\n             className='w-full'\n             type=\"number\" \n             name=\"name\" \n             value={cdi} \n             onChange={(event) => setCdi(event.target.value)}/>\n          </label>\n          <label className='mx-1 font-bold'>\n            IPCA:\n            <input\n             className='w-full'\n             type=\"number\" \n             name=\"name\" \n             value={ipca} \n             onChange={(event) => setIpca(event.target.value)}/>\n          </label>\n        </form>\n        <div className='w-full pl-8'>\n          <div>\n            <button \n              onClick={() => setShowInvetmentForm(false)}\n              className='px-2 py-4 bg-green-400 text-gray-200 rounded-lg text-white font-bold'>\n              Adicionar\n            </button>\n          </div>\n          <InvestmentForm\n            closeHandler={() => setShowInvetmentForm(true)}\n            addInvestment={(investment) => addInvestment(investment)}\n            hidden={showInvetmentForm}/>\n          <div className='pr-16 mt-4'>\n            <div className='mb-2'>\n              <InvestmentHeader/>\n            </div>\n            {inputInvestments.map(buildInvestmentCards)}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getTaxRate = (days) => {\n    if (days > 720) {\n        return 0.15;\n    } else if (days > 360) {\n        return 0.175;\n    } else if (days > 180) {\n        return 0.20;\n    } else {\n        return 0.225;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}